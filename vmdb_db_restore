#!/usr/bin/env ruby

require 'optparse'

# Spinner Credit:
#
#   https://github.com/sindresorhus/cli-spinners/blob/8f4beecc/spinners.json#L894-L903
#
SPINNER = [ "∙∙∙", "●∙∙", "∙●∙", "∙∙●" ].freeze

@options = {
  :drop        => false,
  :environment => "development",
  :migrate     => false,
  :update      => true
}

OptionParser.new do |opt|
  opt.banner = "Usage: #{File.basename $0} --db-name=DB_NAME [options] DB_DUMP"

  opt.separator ""
  opt.separator "Imports and prepares a MIQ database dump for a dev environment"
  opt.separator ""
  opt.separator "Assuming being run from the manageiq root directory"
  opt.separator ""
  opt.separator "Options"

  opt.on "-D", "--[no-]drop",                      "Drop Database? (default: no)" do |yes_no|
    @options[:drop] = yes_no
  end

  opt.on "-e", "--environment=RAILS_ENV", String,  "ENV['RAILS_ENV'] (default: development)" do |env|
    @options[:environment] = env
  end

  opt.on "-m", "--[no-]migrate",                   "Migrate? (default: no)" do |yes_no|
    @options[:migrate] = yes_no
  end

  opt.on "-n", "--db-name=DB_NAME",       String,  "New database name (required)" do |db_name|
    @options[:db_name] = db_name
  end

  opt.on "-r", "--region=REGION",         Integer, "Set ENV['REGION'] (def: NONE)" do |region|
    @options[:region] = region
  end

  opt.on "-m", "--[no-]update",                    "bin/update? (default: yes)" do |yes_no|
    @options[:update] = yes_no
  end

  # opt.on("-v", "--[no-]verbose", "Enable/Disable ActiveRecord logging to STDOUT") do |val|
  #   options[:verbose] = val
  # end
end.parse!

db_dump_file = ARGV.shift
raise ArgumentError, "DB_DUMP is required!"             unless db_dump_file

db_name = @options[:db_name]
raise ArgumentError, "A new database name is required!" unless db_name

require 'open3'
require 'io/console'


cmd_env = {}
cmd_env["RAILS_ENV"] = @options[:environment]
cmd_env["DB"]        = @options[:db_name]
cmd_env["REGION"]    = @options[:region]         if @options[:region]


# Interrupt without a stack trace
trap "INT" do puts; puts "Interrupt..."; exit 1 end


# :call-seq:
#   run_cmd(msg="Running command", cmd="command -a -b")
#   run_cmd(msg="Running command", cmd_env={"FOO" => "foo"}, cmd="command -a -b")
#
# Runs a command in a new process, and prints a message and spinner while it is
# running.
def run_cmd msg, env_or_cmd, cmd = nil
  STDIN.echo = false
  cmd_env = cmd.nil? ? {} : env_or_cmd
  cmd     = env_or_cmd if cmd.nil?

  return if cmd.include?("migrate") || @options[:migrate]

  status  = nil
  spinner = 0
  print "\e[0;1;49m====> \e[1;32;49m#{msg}\e[0m    "

  Open3.popen2e cmd_env, cmd do |stdin, out, cmd_thr|
    # Spinner Thread
    spin = Thread.new do
      while cmd_thr.alive?
        spinner += 1
        print "\b\b\b#{SPINNER[spinner % 4]}"
        sleep 0.3
      end
      # cleanup stdout
      print "\b\b\b   ";
      puts
    end

    # Output thread
    #
    # Currently, just make sure the `out` pipe does not get filled up
    #
    # TODO:  Capture last N of output and display if error
    output = Thread.new { while out.gets do end }

    status = cmd_thr.value
    spin.join
    output.join
  end

  unless cmd.include? "pg_restore"
    fail "Error:  #{cmd} did not complete sucessfully!" unless status.success?
  end
ensure
  STDIN.echo = true
end

run_cmd "Creating database",    cmd_env, %Q[bin/rake #{"db:drop" if @options[:drop]} db:create]
run_cmd "Dumping data into #{db_name}",  %Q[pg_restore -v -U root -j 4 -d #{db_name} "#{db_dump_file}"]
run_cmd "Migrating database",   cmd_env, %Q[bin/rake db:migrate]
run_cmd "Fixing database auth",          %Q[bundle exec tools/fix_auth.rb --v2 --invalid bogus --db #{db_name}]
run_cmd "Update dependencies",  cmd_env, %Q[bin/update]
run_cmd "Update default auth",  cmd_env, %Q[bin/rails runner 'User.where(:userid => "admin").each {|u| u.update_attribute :password, "smartvm"}']
