#!/usr/bin/env ruby

require 'optparse'

class FindAndReplace
  DEFAULT_OPTS = {
    :dirs  => ['spec'],
    :class => nil
  }

  def self.run *args
    new(args).run
  end

  def initialize args
    @args    = args
    @opts    = DEFAULT_OPTS.dup
    parse_opts!

    @factory = @args.shift
    @regexp  = Regexp.new "FactoryBot.(create|build)\\(:#{@factory}(, ?|\\))"
    @dirs    = @opts[:dirs]
    @klass   = @opts[:class]
    @klass ||= @factory.tr(':', '')
                      .split('_')
                      .map!(&:capitalize)
                      .join

    validate_opts!
  end

  def run
    with_files do |file, name|
      line  = nil
      match = false

      while line = file.gets
        break if match = line =~ @regexp
      end

      if match
        puts "replacing contents for '#{name}'..."
        position = file.pos

        contents = line + file.read
        contents.gsub!(@regexp) do |match|
          result  = "#{@klass}.#{$1 == 'build' ? 'new' : $1}"
          result += "(" if $2 != ")"
          result
        end

        file.rewind
        file.truncate(position)
        file.seek(position)
        file.write contents
      end
    end
  end

  private

  def parse_opts!
    parser.parse! @args
  end

  def validate_opts!
    unless @factory
      puts parser.help + "\n\n"
      raise ArgumentError, "Missing factory to replace!"
    end
  end

  def parser
    OptionParser.new do |opt|
      opt.banner = "Usage: #{File.basename $0} [options] factory"

      opt.separator ""
      opt.separator "Scans the list of directories (default: 'spec/') for usages"
      opt.separator "of `FactoryBot.create` or `FactoryBot.build` of the given"
      opt.separator "factory, and replaces the contents of the file with a direct"
      opt.separator "ActiveRecord call."
      opt.separator ""
      opt.separator "An optional --class can be passed, which will inform the"
      opt.separator "script of the the replacements class should be, otherwise"
      opt.separator "that is derived from the factory name"
      opt.separator ""
      opt.separator "Options"

      opt.on("-c", "--class=CLASS", String, "class to replace factory with") do |klass|
        @opts[:class] = klass
      end

      opt.on("-d", "--dirs=DIRS", Array, "directories to search (default: spec)") do |dirs|
        @opts[:dirs] = dirs
      end
    end
  end

  # Finds files in specified directories
  #
  # Assumes `@dirs` is a `spec/` dir
  #
  # Skips over:
  #
  #   - directories (duh)
  #   - files in subdirectories of manageiq
  #
  # For the second, that is assumed that it is a link to or a clone of
  # `manageiq`, and replacing those files isn't relevant.
  #
  def with_files
    @dirs.each do |dir|
      Dir["#{dir}/**/*.rb"].each do |filename|
        next if filename.start_with? "#{dir}/manageiq/"
        next if File.directory? filename

        File.open filename, "r+" do |file|
          yield file, filename
        end
      end
    end
  end
end

FindAndReplace.run(*ARGV) if __FILE__ == $PROGRAM_NAME
